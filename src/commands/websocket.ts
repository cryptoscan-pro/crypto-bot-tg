import { Context, Markup } from 'telegraf';
import { WebSocketConfig } from '../types/WebSocketConfig';
import { CLIENTS } from '..';
import { generateId } from '../utils/generateId';

export async function listWebsockets(ctx: Context) {
  const userId = String(ctx.from!.id);
  const configs = CLIENTS.get(userId) || [];
  
  if (configs.length === 0) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π');
    return;
  }

  const buttons = configs.map(config => [
    Markup.button.callback(
      `${config.isActive ? 'üü¢' : 'üî¥'} ${config.name} (${config.destination.type})`,
      `manage_${config.id}`
    )
  ]);

  await ctx.reply(
    '–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:',
    Markup.inlineKeyboard([
      ...buttons,
      [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é', 'create_websocket')]
    ])
  );
}

export async function manageWebsocket(ctx: Context, configId: string) {
  const userId = String(ctx.from!.id);
  const configs = CLIENTS.get(userId) || [];
  const config = configs.find(c => c.id === configId);

  if (!config) {
    await ctx.reply('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  await ctx.reply(
    `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π "${config.name}":`,
    Markup.inlineKeyboard([
      [Markup.button.callback(
        config.isActive ? 'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å', 
        `toggle_${configId}`
      )],
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_${configId}`)],
      [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', `delete_${configId}`)],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'list_websockets')]
    ])
  );
}
